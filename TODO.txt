Overall:
- gc free queue? to free on main thread? (how?)
- refer to assembly location to obtain assets and Data folder
- proper logging
- on cell change, only remesh the mesh chunk that it is in
- rename TileData class to Tile
- undo/redo for level resize
- open file browser in directory of current level
- help pages/hints/tooltips/whatever
- Edit/View menu buttons for specific editors
  e.g. New Camera button in camera editor,
  no copy/paste in light/effects editor
- copy henry
  (if i were to add a new level config screen, add bool toggle to auto-place cameras)
  (that is the specific thing i want to copy)

Level Properties:

Geometry Editor:
- Fissure (still haven't made that yet, lol)
- select and copy/paste
- show tool preview over mouse
- ability to view tiles
- right-click to remove cells/objects

NOTE: shortcut entrances always have an object of type 4. (dunno why, probably some leftovers from an older impl)

Tile Editor:
- rect material place

Camera Editor:
- way to duplicate camera corner transform
- Select a camera first, then transform corners

Light Editor:
- light ring
- IJKL light parameter changing
- WASD catalog navigation
- save intermediate textures for change history
  (i guess once per every 1000 stroke atoms or something)
- toggle view shadow plane and occlusion plane

Effects Editor:
- only store the pixels that changed in the matrix

Prop Editor: (TODO)
- instead of using keys to rotate/scale props, user will place them down first
  and then use handles on the edge of the prop to rotate/scale them.
  (i think this is fine, although i haven't done much prop editing myself
  ...or much leditor experience in general...)
- rope-type props will have a "Simulate" button in an always-visible prop properties field.
  holding down this button will perform the simulation for as long as it is held.
- for rope-type props, copy henry's design

Render:
- show time elapsed
- show light render stage
- if possible, show coloring stage, although i don't think
  drizzle has the code required to show that?

tile data format (from rwe+):
    {"tp": "tileHead", "data": ["point(C, T)", "N"]}
    C = Category ID (starting from 1) plus 2 (Stone = 3, Machinery = 15, Misc = 12)
    T = Tile index starting from 1
    N = tile name

    {"tp": "tileBody", "data": ["PT", L]}
    PT = location of the tile head plus (1, 1)
    L = layer

    {"tp": "material", "data": "N"}
    N = material name

    {"tp": "default": "data": 0}

effects matrix format
  {
    #nm: string
    #tp: "nn" | "standardErosion" (don't really know what this means),
    #crossScreen: 0 (idk what this means, but it is effect-specific),
    #mtrx: (2d array with values ranging from 0 to 100)
    #Options: [
      [
        section Header as string,
        options as string array (no options = empty array),
        selected value? (string, but a number is used for seed)
      ]
    ],

    [if #tp == "standardErosion"] (
      #repeats: number (idk what this does, but it is effect-specific)
      #affectOpenAreas: number (idk what this does either, but it is effect-specific)
    )
  }

prop init format
[
  #nm: string
  #tp: "standard" | "soft" | "variedStandard" | "simpleDecal" | "variedSoft" | "variedDecal" | "antimatter" | "coloredSoft"

  #colorize?: integer

  if tp == "standard" | "variedStandard" (
    #colorTreatment: "standard" | "bevel"
    
    if colorTreatment == "bevel" (
      #bevel: integer  
    )

    #sz: point
    #repeatL: int[]
  )

  if tp == "variedStandard" (
    #vars: integer
    #random: integer
  )

  if tp == "variedSoft" | "variedDecal" (
    #pxlSize: point
    #vars: integer
    #random: integer
  )

  if tp == "coloredSoft" (
    #pxlSize: point
  )

  if tp == "soft" (
    #depth: integer
    #round: integer
    #contourExp: float
    #selfShade: integer
    #highLightBorder: float
    #depthAffectHilites: float
    #shadowBorder: float
    #smoothShading: integer
  )

  if tp == "simpleDecal" | tp == "variedDecal" (
    #depth: integer
  )

  if tp == "antimatter" (
    #depth: number
    #contourExp: number
  )

  #tags: ("randomRotat" | "snapToGrid" | "Circular Sign" | "randomFlipX" | "randomFlipY")[]
  #layerExceptions: []
  #notes: string[]
]
prop init format
[
  #nm: string
  #tp: "standard" <
    #colorTreatment: "bevel" <
      #bevel: int
    >
    | "standard"
    #sz: point
    #repeatL: int[]
    #tags: <"randomRotat", "customColor", 
  >
]

KEYBINDS:
  General:
    Arrow Keys - Scroll
    Scroll Wheel - Zoom
    Middle Mouse Button - Pan
    Ctrl + Z - Undo
    Ctrl + Shift + Z / Ctrl + Y - Redo
    1 - Environment Editor
    2 - Geometry Editor
    3 - Tile Editor
    4 - Camera Editor
    5 - Light Editor
    6 - Effects Editor
    7 - Props Editor
  
  Geometry Editor:
    WASD - Browse tool selector
    LMB - Place/Remove (Context-Specific)
    Shift+LMB - Rect Fill (Context-Specific)
    E - Toggle Layer 1
    R - Toggle Layer 2
    T - Toggle Layer 3

  Tile Editor:
    TAB - Switch Layer
    WASD - Browse tile selector
    Shift + MouseWheel - Change material brush size
    E - Select tile from level
    Q - Set currently selected material as default
    LMB - Place Tile/Material
    RMB - Remove Tile/Material
    G+RMB - Remove Tile and Geometry
    F+LMB - Force Place
    G+LMB - Force Geometry

  Camera Editor:
    N - New Camera
    RMB/Backspace/Delete - Delete Camera/Reset Corner
    LMB - Move Camera/Corner

  Light Editor:
    WASD - Navigate catalog
    Q + Mouse - Scale brush
    E + Mouse - Rotate brush
    R - Reset transform

  Effects Editor:
    LMB - Paint effect
    Shift + LMB - Paint effect stronger
    RMB - Erase effect
    Shift + MouseWheel - Change brush size